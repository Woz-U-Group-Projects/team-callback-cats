{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//create a component that will keep track of user's auth state\n//then wrap _app.js so that entire app knows if the user is logged in or not\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\nimport { axiosAuth } from '../actions/axios';\nimport { setCookie, destroyCookie } from 'nookies';\n\nconst FirebaseAuthState = ({\n  children\n}) => {\n  const {\n    dispatch\n  } = useContext(Context);\n  useEffect(() => {\n    const handle = setInterval(async () => {\n      console.log(`refreshing token...`);\n      const user = firebase.auth().currentUser;\n\n      if (user) {\n        const token = await user.getIdToken(true);\n        destroyCookie(null, \"token\");\n        setCookie(null, \"token\", token, {}); // get user info from backend, not firebase\n\n        axiosAuth.post(`/current-user`).then(res => {\n          // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\n          dispatch({\n            type: \"LOGIN\",\n            payload: res.data\n          });\n        });\n      }\n    }, 10 * 60 * 1000);\n    return () => clearInterval(handle);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\nexport default FirebaseAuthState;","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/hardware-inventory/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axiosAuth","setCookie","destroyCookie","FirebaseAuthState","children","dispatch","handle","setInterval","console","log","user","auth","currentUser","token","getIdToken","post","then","res","type","payload","data","clearInterval"],"mappings":";;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,SAAzC;;AAGA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAeR,UAAU,CAACE,OAAD,CAA/B;AAGAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,MAAM,GAAGC,WAAW,CAAC,YAAY;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAa,qBAAb;AACA,YAAMC,IAAI,GAAGZ,QAAQ,CAACa,IAAT,GAAgBC,WAA7B;;AACA,UAAIF,IAAJ,EAAU;AACR,cAAMG,KAAK,GAAG,MAAMH,IAAI,CAACI,UAAL,CAAgB,IAAhB,CAApB;AACAZ,QAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,QAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgBY,KAAhB,EAAuB,EAAvB,CAAT,CAHQ,CAIR;;AACAb,QAAAA,SAAS,CAACe,IAAV,CAAgB,eAAhB,EAAgCC,IAAhC,CAAsCC,GAAD,IAAS;AAC5C;AACAZ,UAAAA,QAAQ,CAAC;AACPa,YAAAA,IAAI,EAAE,OADC;AAEPC,YAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,WAAD,CAAR;AAID,SAND;AAOD;AACF,KAhByB,EAgBvB,KAAK,EAAL,GAAU,IAhBa,CAA1B;AAkBA,WAAO,MAAMC,aAAa,CAACf,MAAD,CAA1B;AACD,GApBM,EAoBJ,EApBI,CAAT;AAsBA,sBAAO;AAAA,cAAGF;AAAH,mBAAP;AACH,CA3BD;;AA6BA,eAAeD,iBAAf","sourcesContent":["//create a component that will keep track of user's auth state\r\n//then wrap _app.js so that entire app knows if the user is logged in or not\r\n\r\nimport React, { useEffect, useContext } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Context } from '../context';\r\nimport { axiosAuth } from '../actions/axios';\r\nimport { setCookie, destroyCookie } from 'nookies';\r\n\r\n\r\nconst FirebaseAuthState = ({ children }) => {\r\n    const { dispatch } = useContext(Context);\r\n\r\n\r\n    useEffect(() => {\r\n        const handle = setInterval(async () => {\r\n          console.log(`refreshing token...`);\r\n          const user = firebase.auth().currentUser;\r\n          if (user) {\r\n            const token = await user.getIdToken(true);\r\n            destroyCookie(null, \"token\");\r\n            setCookie(null, \"token\", token, {});\r\n            // get user info from backend, not firebase\r\n            axiosAuth.post(`/current-user`).then((res) => {\r\n              // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\r\n              dispatch({\r\n                type: \"LOGIN\",\r\n                payload: res.data,\r\n              });\r\n            });\r\n          }\r\n        }, 10 * 60 * 1000);\r\n     \r\n        return () => clearInterval(handle);\r\n      }, []);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}