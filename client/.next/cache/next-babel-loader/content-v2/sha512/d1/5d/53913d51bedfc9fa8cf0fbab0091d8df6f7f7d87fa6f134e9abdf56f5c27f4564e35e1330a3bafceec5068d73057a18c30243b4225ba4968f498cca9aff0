{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//create a component that will keep track of user's auth state\n//then wrap _app.js so that entire app knows if the user is logged in or not\nimport React, { useEffect, useContext } from \"react\";\nimport firebase from \"../firebase\";\nimport { Context } from \"../context\";\nimport { axiosAuth } from \"../actions/axios\";\nimport { setCookie, destroyCookie } from \"nookies\"; // this component is responsible to keep the current user in context\n// then user info is accessible for the entire app\n// you can build protected routes etc based on that...\n\nconst FirebaseAuthState = ({\n  children\n}) => {\n  const {\n    dispatch\n  } = useContext(Context);\n  useEffect(() => {\n    // console.log(\"firebase auth state from context\", state);\n    return firebase.auth().onIdTokenChanged(async user => {\n      if (!user) {\n        dispatch({\n          type: \"LOGOUT\"\n        });\n        destroyCookie(null, \"token\");\n        setCookie(null, \"token\", \"\", {});\n        return;\n      } else {\n        // console.log(\"FIREBASE_AUTH_STATE_FIREBASE_USER\", user);\n        // set token in cookie for use in getServerSideProps\n        const token = await user.getIdToken();\n        destroyCookie(null, \"token\");\n        setCookie(null, \"token\", token, {}); // get user info from backend, not firebase\n\n        axiosAuth.post(`/current-user`).then(res => {\n          // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\n          dispatch({\n            type: \"LOGIN\",\n            payload: res.data\n          });\n        });\n      }\n    });\n  }, []); // force refresh the token every 10 minutes\n\n  useEffect(() => {\n    const handle = setInterval(async () => {\n      console.log(`refreshing token...`);\n      const user = firebase.auth().currentUser;\n\n      if (user) {\n        const token = await user.getIdToken(true);\n        destroyCookie(null, \"token\");\n        setCookie(null, \"token\", token, {}); // get user info from backend, not firebase\n\n        axiosAuth.post(`/current-user`).then(res => {\n          // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\n          dispatch({\n            type: \"LOGIN\",\n            payload: res.data\n          });\n        });\n      }\n    }, 10 * 60 * 1000);\n    return () => clearInterval(handle);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\nexport default FirebaseAuthState;","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/hardware-inventory/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axiosAuth","setCookie","destroyCookie","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","token","getIdToken","post","then","res","payload","data","handle","setInterval","console","log","currentUser","clearInterval"],"mappings":";;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,SAAzC,C,CAEA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAeR,UAAU,CAACE,OAAD,CAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,WAAOE,QAAQ,CAACQ,IAAT,GAAgBC,gBAAhB,CAAiC,MAAOC,IAAP,IAAgB;AACtD,UAAI,CAACA,IAAL,EAAW;AACTH,QAAAA,QAAQ,CAAC;AACPI,UAAAA,IAAI,EAAE;AADC,SAAD,CAAR;AAIAP,QAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,QAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgB,EAAhB,EAAoB,EAApB,CAAT;AACA;AACD,OARD,MAQO;AACL;AACA;AACA,cAAMS,KAAK,GAAG,MAAMF,IAAI,CAACG,UAAL,EAApB;AACAT,QAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,QAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgBS,KAAhB,EAAuB,EAAvB,CAAT,CALK,CAML;;AACAV,QAAAA,SAAS,CAACY,IAAV,CAAgB,eAAhB,EAAgCC,IAAhC,CAAsCC,GAAD,IAAS;AAC5C;AACAT,UAAAA,QAAQ,CAAC;AACPI,YAAAA,IAAI,EAAE,OADC;AAEPM,YAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,WAAD,CAAR;AAID,SAND;AAOD;AACF,KAxBM,CAAP;AAyBD,GA3BQ,EA2BN,EA3BM,CAAT,CAH0C,CAgC1C;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,MAAM,GAAGC,WAAW,CAAC,YAAY;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAa,qBAAb;AACA,YAAMZ,IAAI,GAAGV,QAAQ,CAACQ,IAAT,GAAgBe,WAA7B;;AACA,UAAIb,IAAJ,EAAU;AACR,cAAME,KAAK,GAAG,MAAMF,IAAI,CAACG,UAAL,CAAgB,IAAhB,CAApB;AACAT,QAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,QAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgBS,KAAhB,EAAuB,EAAvB,CAAT,CAHQ,CAIR;;AACAV,QAAAA,SAAS,CAACY,IAAV,CAAgB,eAAhB,EAAgCC,IAAhC,CAAsCC,GAAD,IAAS;AAC5C;AACAT,UAAAA,QAAQ,CAAC;AACPI,YAAAA,IAAI,EAAE,OADC;AAEPM,YAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,WAAD,CAAR;AAID,SAND;AAOD;AACF,KAhByB,EAgBvB,KAAK,EAAL,GAAU,IAhBa,CAA1B;AAkBA,WAAO,MAAMM,aAAa,CAACL,MAAD,CAA1B;AACD,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBAAO;AAAA,cAAGb;AAAH,mBAAP;AACD,CAxDD;;AA0DA,eAAeD,iBAAf","sourcesContent":["//create a component that will keep track of user's auth state\r\n//then wrap _app.js so that entire app knows if the user is logged in or not\r\n\r\nimport React, { useEffect, useContext } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport { Context } from \"../context\";\r\nimport { axiosAuth } from \"../actions/axios\";\r\nimport { setCookie, destroyCookie } from \"nookies\";\r\n \r\n// this component is responsible to keep the current user in context\r\n// then user info is accessible for the entire app\r\n// you can build protected routes etc based on that...\r\nconst FirebaseAuthState = ({ children }) => {\r\n  const { dispatch } = useContext(Context);\r\n \r\n  useEffect(() => {\r\n    // console.log(\"firebase auth state from context\", state);\r\n    return firebase.auth().onIdTokenChanged(async (user) => {\r\n      if (!user) {\r\n        dispatch({\r\n          type: \"LOGOUT\",\r\n        });\r\n \r\n        destroyCookie(null, \"token\");\r\n        setCookie(null, \"token\", \"\", {});\r\n        return;\r\n      } else {\r\n        // console.log(\"FIREBASE_AUTH_STATE_FIREBASE_USER\", user);\r\n        // set token in cookie for use in getServerSideProps\r\n        const token = await user.getIdToken();\r\n        destroyCookie(null, \"token\");\r\n        setCookie(null, \"token\", token, {});\r\n        // get user info from backend, not firebase\r\n        axiosAuth.post(`/current-user`).then((res) => {\r\n          // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\r\n          dispatch({\r\n            type: \"LOGIN\",\r\n            payload: res.data,\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }, []);\r\n \r\n  // force refresh the token every 10 minutes\r\n  useEffect(() => {\r\n    const handle = setInterval(async () => {\r\n      console.log(`refreshing token...`);\r\n      const user = firebase.auth().currentUser;\r\n      if (user) {\r\n        const token = await user.getIdToken(true);\r\n        destroyCookie(null, \"token\");\r\n        setCookie(null, \"token\", token, {});\r\n        // get user info from backend, not firebase\r\n        axiosAuth.post(`/current-user`).then((res) => {\r\n          // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\r\n          dispatch({\r\n            type: \"LOGIN\",\r\n            payload: res.data,\r\n          });\r\n        });\r\n      }\r\n    }, 10 * 60 * 1000);\r\n \r\n    return () => clearInterval(handle);\r\n  }, []);\r\n \r\n  return <>{children}</>;\r\n};\r\n \r\nexport default FirebaseAuthState;\r\n"]},"metadata":{},"sourceType":"module"}