{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Jacob/Desktop/hardware-inventory/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Jacob/Desktop/hardware-inventory/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\n//create a component that will keep track of user's auth state\n//then wrap _app.js so that entire app knows if the user is logged in or not\nimport React, { useEffect, useContext } from \"react\";\nimport firebase from \"../firebase\";\nimport { Context } from \"../context\";\nimport { axiosAuth } from \"../actions/axios\";\nimport { setCookie, destroyCookie } from \"nookies\"; // this component is responsible to keep the current user in context\n// then user info is accessible for the entire app\n// you can build protected routes etc based on that...\n\nvar FirebaseAuthState = function FirebaseAuthState(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(Context),\n      dispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    // console.log(\"firebase auth state from context\", state);\n    return firebase.auth().onIdTokenChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var token;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user) {\n                  _context.next = 7;\n                  break;\n                }\n\n                dispatch({\n                  type: \"LOGOUT\"\n                });\n                destroyCookie(null, \"token\");\n                setCookie(null, \"token\", \"\", {});\n                return _context.abrupt(\"return\");\n\n              case 7:\n                _context.next = 9;\n                return user.getIdToken();\n\n              case 9:\n                token = _context.sent;\n                destroyCookie(null, \"token\");\n                setCookie(null, \"token\", token, {}); // get user info from backend, not firebase\n\n                axiosAuth.post(\"/current-user\").then(function (res) {\n                  // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\n                  dispatch({\n                    type: \"LOGIN\",\n                    payload: res.data\n                  });\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []); // force refresh the token every 10 minutes\n\n  useEffect(function () {\n    var handle = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var user, token;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"refreshing token...\");\n              user = firebase.auth().currentUser;\n\n              if (!user) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 5;\n              return user.getIdToken(true);\n\n            case 5:\n              token = _context2.sent;\n              destroyCookie(null, \"token\");\n              setCookie(null, \"token\", token, {}); // get user info from backend, not firebase\n\n              axiosAuth.post(\"/current-user\").then(function (res) {\n                // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\n                dispatch({\n                  type: \"LOGIN\",\n                  payload: res.data\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })), 10 * 60 * 1000);\n    return function () {\n      return clearInterval(handle);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(FirebaseAuthState, \"KVZv8QSi3lIdCjIyn6lwBt86Dj4=\");\n\n_c = FirebaseAuthState;\nexport default FirebaseAuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthState\");","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/hardware-inventory/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axiosAuth","setCookie","destroyCookie","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","getIdToken","token","post","then","res","payload","data","handle","setInterval","console","log","currentUser","clearInterval"],"mappings":"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","sourcesContent":["//create a component that will keep track of user's auth state\r\n//then wrap _app.js so that entire app knows if the user is logged in or not\r\n\r\nimport React, { useEffect, useContext } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport { Context } from \"../context\";\r\nimport { axiosAuth } from \"../actions/axios\";\r\nimport { setCookie, destroyCookie } from \"nookies\";\r\n \r\n// this component is responsible to keep the current user in context\r\n// then user info is accessible for the entire app\r\n// you can build protected routes etc based on that...\r\nconst FirebaseAuthState = ({ children }) => {\r\n  const { dispatch } = useContext(Context);\r\n \r\n  useEffect(() => {\r\n    // console.log(\"firebase auth state from context\", state);\r\n    return firebase.auth().onIdTokenChanged(async (user) => {\r\n      if (!user) {\r\n        dispatch({\r\n          type: \"LOGOUT\",\r\n        });\r\n \r\n        destroyCookie(null, \"token\");\r\n        setCookie(null, \"token\", \"\", {});\r\n        return;\r\n      } else {\r\n        // console.log(\"FIREBASE_AUTH_STATE_FIREBASE_USER\", user);\r\n        // set token in cookie for use in getServerSideProps\r\n        const token = await user.getIdToken();\r\n        destroyCookie(null, \"token\");\r\n        setCookie(null, \"token\", token, {});\r\n        // get user info from backend, not firebase\r\n        axiosAuth.post(`/current-user`).then((res) => {\r\n          // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\r\n          dispatch({\r\n            type: \"LOGIN\",\r\n            payload: res.data,\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }, []);\r\n \r\n  // force refresh the token every 10 minutes\r\n  useEffect(() => {\r\n    const handle = setInterval(async () => {\r\n      console.log(`refreshing token...`);\r\n      const user = firebase.auth().currentUser;\r\n      if (user) {\r\n        const token = await user.getIdToken(true);\r\n        destroyCookie(null, \"token\");\r\n        setCookie(null, \"token\", token, {});\r\n        // get user info from backend, not firebase\r\n        axiosAuth.post(`/current-user`).then((res) => {\r\n          // console.log(\"USER ROUTE RES IN FIREBASE_AUTH_STATE\", res);\r\n          dispatch({\r\n            type: \"LOGIN\",\r\n            payload: res.data,\r\n          });\r\n        });\r\n      }\r\n    }, 10 * 60 * 1000);\r\n \r\n    return () => clearInterval(handle);\r\n  }, []);\r\n \r\n  return <>{children}</>;\r\n};\r\n \r\nexport default FirebaseAuthState;\r\n"]},"metadata":{},"sourceType":"module"}