{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Jacob/Desktop/Hardware-Inventory-App/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Jacob/Desktop/Hardware-Inventory-App/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\n//create a component that will keep track of user's auth state\n//then wrap _app.js so that entire app knows if the user is logged in or not\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\nimport axios from 'axios';\n\nvar FirebaseAuthState = function FirebaseAuthState(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(Context),\n      dispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    return firebase.auth().onIdTokenChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var _yield$user$getIdToke, token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user) {\n                  _context.next = 4;\n                  break;\n                }\n\n                dispatch({\n                  type: 'LOGOUT'\n                });\n                _context.next = 10;\n                break;\n\n              case 4:\n                _context.next = 6;\n                return user.getIdTokenResult();\n\n              case 6:\n                _yield$user$getIdToke = _context.sent;\n                token = _yield$user$getIdToke.token;\n                console.log('TOKEN', token);\n                axios.post('http://localhost:4000/api/current-user', {}, {\n                  headers: {\n                    token: token\n                  }\n                }).then(function (res) {\n                  console.log('RES =====>', res); //dispatch({\n                  //    type: 'LOGIN',\n                  //    payload: res.data,\n                  //});\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(FirebaseAuthState, \"o3sFqHzzIboOoOF6b2FSmERiAhY=\");\n\n_c = FirebaseAuthState;\nexport default FirebaseAuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthState\");","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/Hardware-Inventory-App/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axios","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","getIdTokenResult","token","console","log","post","headers","then","res"],"mappings":";;;;;;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBACnBL,UAAU,CAACE,OAAD,CADS;AAAA,MAChCI,QADgC,eAChCA,QADgC;;AAIxCP,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAOE,QAAQ,CAACM,IAAT,GAAgBC,gBAAhB;AAAA,2EAAiC,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC/BA,IAD+B;AAAA;AAAA;AAAA;;AAEhCH,gBAAAA,QAAQ,CAAC;AACLI,kBAAAA,IAAI,EAAE;AADD,iBAAD,CAAR;AAFgC;AAAA;;AAAA;AAAA;AAAA,uBAMRD,IAAI,CAACE,gBAAL,EANQ;;AAAA;AAAA;AAMxBC,gBAAAA,KANwB,yBAMxBA,KANwB;AAOhCC,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACAT,gBAAAA,KAAK,CAACY,IAAN,CAAW,wCAAX,EACI,EADJ,EAEI;AACIC,kBAAAA,OAAO,EAAE;AACLJ,oBAAAA,KAAK,EAALA;AADK;AADb,iBAFJ,EAQCK,IARD,CAQM,UAAAC,GAAG,EAAI;AACTL,kBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,GAA1B,EADS,CAET;AACA;AACA;AACA;AACH,iBAdD;;AARgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjC;;AAAA;AAAA;AAAA;AAAA,QAAP;AAyBH,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,sBAAO;AAAA,cAAGb;AAAH,mBAAP;AACH,CAjCD;;GAAMD,iB;;KAAAA,iB;AAmCN,eAAeA,iBAAf","sourcesContent":["//create a component that will keep track of user's auth state\r\n//then wrap _app.js so that entire app knows if the user is logged in or not\r\n\r\nimport React, { useEffect, useContext } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Context } from '../context';\r\nimport axios from 'axios';\r\n\r\n\r\nconst FirebaseAuthState = ({ children }) => {\r\n    const { dispatch } = useContext(Context);\r\n\r\n\r\n    useEffect(() => {\r\n        return firebase.auth().onIdTokenChanged(async (user) => {\r\n            if (!user) {\r\n                dispatch({\r\n                    type: 'LOGOUT',\r\n                });\r\n            } else {\r\n                const { token } = await user.getIdTokenResult();\r\n                console.log('TOKEN', token);\r\n                axios.post('http://localhost:4000/api/current-user',\r\n                    {},\r\n                    {\r\n                        headers: {\r\n                            token,\r\n                        },\r\n                    }\r\n                )\r\n                .then(res => {\r\n                    console.log('RES =====>', res)\r\n                    //dispatch({\r\n                    //    type: 'LOGIN',\r\n                    //    payload: res.data,\r\n                    //});\r\n                });\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}