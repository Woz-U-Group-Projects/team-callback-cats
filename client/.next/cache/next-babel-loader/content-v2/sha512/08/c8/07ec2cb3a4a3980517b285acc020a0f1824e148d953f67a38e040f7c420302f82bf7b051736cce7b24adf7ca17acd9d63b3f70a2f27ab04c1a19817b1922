{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//create a component that will keep track of user's auth state\n//then wrap _app.js so that entire app knows if the user is logged in or not\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\nimport axios from 'axios';\n\nconst FirebaseAuthState = ({\n  children\n}) => {\n  const {\n    dispatch\n  } = useContext(Context);\n  useEffect(() => {\n    return firebase.auth().onIdTokenChanged(async user => {\n      if (!user) {\n        dispatch({\n          type: 'LOGOUT'\n        });\n      } else {\n        const {\n          token\n        } = await user.getIdTokenResult();\n        console.log('TOKEN', token);\n        axios.post('http://localhost:4000/api/current-user', {}, {\n          headers: {\n            token\n          }\n        }).then(res => {\n          console.log('RES =====>', res); //dispatch({\n          //    type: 'LOGIN',\n          //    payload: res.data,\n          //});\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\nexport default FirebaseAuthState;","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/Hardware-Inventory-App/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axios","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","token","getIdTokenResult","console","log","post","headers","then","res"],"mappings":";;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAeN,UAAU,CAACE,OAAD,CAA/B;AAGAH,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAOE,QAAQ,CAACM,IAAT,GAAgBC,gBAAhB,CAAiC,MAAOC,IAAP,IAAgB;AACpD,UAAI,CAACA,IAAL,EAAW;AACPH,QAAAA,QAAQ,CAAC;AACLI,UAAAA,IAAI,EAAE;AADD,SAAD,CAAR;AAGH,OAJD,MAIO;AACH,cAAM;AAAEC,UAAAA;AAAF,YAAY,MAAMF,IAAI,CAACG,gBAAL,EAAxB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AACAR,QAAAA,KAAK,CAACY,IAAN,CAAW,wCAAX,EACI,EADJ,EAEI;AACIC,UAAAA,OAAO,EAAE;AACLL,YAAAA;AADK;AADb,SAFJ,EAQCM,IARD,CAQMC,GAAG,IAAI;AACTL,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,GAA1B,EADS,CAET;AACA;AACA;AACA;AACH,SAdD;AAeH;AACJ,KAxBM,CAAP;AAyBH,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,sBAAO;AAAA,cAAGb;AAAH,mBAAP;AACH,CAjCD;;AAmCA,eAAeD,iBAAf","sourcesContent":["//create a component that will keep track of user's auth state\r\n//then wrap _app.js so that entire app knows if the user is logged in or not\r\n\r\nimport React, { useEffect, useContext } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Context } from '../context';\r\nimport axios from 'axios';\r\n\r\n\r\nconst FirebaseAuthState = ({ children }) => {\r\n    const { dispatch } = useContext(Context);\r\n\r\n\r\n    useEffect(() => {\r\n        return firebase.auth().onIdTokenChanged(async (user) => {\r\n            if (!user) {\r\n                dispatch({\r\n                    type: 'LOGOUT',\r\n                });\r\n            } else {\r\n                const { token } = await user.getIdTokenResult();\r\n                console.log('TOKEN', token);\r\n                axios.post('http://localhost:4000/api/current-user',\r\n                    {},\r\n                    {\r\n                        headers: {\r\n                            token,\r\n                        },\r\n                    }\r\n                )\r\n                .then(res => {\r\n                    console.log('RES =====>', res)\r\n                    //dispatch({\r\n                    //    type: 'LOGIN',\r\n                    //    payload: res.data,\r\n                    //});\r\n                });\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}