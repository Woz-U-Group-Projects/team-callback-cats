{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//create a component that will keep track of user's auth state\n//then wrap _app.js so that entire app knows if the user is logged in or not\nimport React, { useEfffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\n\nconst FirebaseAuthState = () => {\n  const {\n    dispatch\n  } = useContext(Context);\n  useEfffect(() => {\n    return firebase.auth().onIdTokenChanged(async user => {\n      if (!user) {\n        dispatch({\n          type: 'LOGOUT'\n        });\n      } else {\n        const {\n          token\n        } = await user.getIdTokenResult();\n        console.log('TOKEN', token);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\nexport default FirebaseAuthState;","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/Hardware-Inventory-App/client/components/FirebaseAuthState.js"],"names":["React","useEfffect","useContext","firebase","Context","FirebaseAuthState","dispatch","auth","onIdTokenChanged","user","type","token","getIdTokenResult","console","log","children"],"mappings":";;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAGA,MAAMC,iBAAiB,GAAG,MAAM;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAeJ,UAAU,CAACE,OAAD,CAA/B;AAGAH,EAAAA,UAAU,CAAC,MAAM;AACb,WAAOE,QAAQ,CAACI,IAAT,GAAgBC,gBAAhB,CAAiC,MAAOC,IAAP,IAAgB;AACpD,UAAG,CAACA,IAAJ,EAAU;AACNH,QAAAA,QAAQ,CAAC;AACLI,UAAAA,IAAI,EAAE;AADD,SAAD,CAAR;AAGH,OAJD,MAIO;AACJ,cAAM;AAAEC,UAAAA;AAAF,YAAY,MAAMF,IAAI,CAACG,gBAAL,EAAxB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AACF;AACJ,KATM,CAAP;AAUH,GAXS,EAWP,EAXO,CAAV;AAaA,sBAAO;AAAA,cAAGI;AAAH,mBAAP;AACH,CAlBD;;AAoBA,eAAeV,iBAAf","sourcesContent":["//create a component that will keep track of user's auth state\r\n//then wrap _app.js so that entire app knows if the user is logged in or not\r\n\r\nimport React, { useEfffect, useContext } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Context } from '../context';\r\n\r\n\r\nconst FirebaseAuthState = () => {\r\n    const { dispatch } = useContext(Context);\r\n\r\n\r\n    useEfffect(() => {\r\n        return firebase.auth().onIdTokenChanged(async (user) => {\r\n            if(!user) {\r\n                dispatch({\r\n                    type: 'LOGOUT',\r\n                });\r\n            } else {\r\n               const { token } = await user.getIdTokenResult();\r\n               console.log('TOKEN', token);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}