{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Jacob/Desktop/Hardware-Inventory-App/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Jacob/Desktop/Hardware-Inventory-App/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\n//create a component that will keep track of user's auth state\n//then wrap _app.js so that entire app knows if the user is logged in or not\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\nimport { axiosAuth } from '../actions/axios';\n\nvar FirebaseAuthState = function FirebaseAuthState(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(Context),\n      dispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    return firebase.auth().onIdTokenChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var _yield$user$getIdToke, token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user) {\n                  _context.next = 5;\n                  break;\n                }\n\n                dispatch({\n                  type: 'LOGOUT'\n                });\n                destr;\n                _context.next = 11;\n                break;\n\n              case 5:\n                _context.next = 7;\n                return user.getIdTokenResult();\n\n              case 7:\n                _yield$user$getIdToke = _context.sent;\n                token = _yield$user$getIdToke.token;\n                console.log('TOKEN', token);\n                axiosAuth.post('/current-user', {}).then(function (res) {\n                  console.log('RES =====>', res);\n                  dispatch({\n                    type: 'LOGIN',\n                    payload: res.data\n                  });\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(FirebaseAuthState, \"o3sFqHzzIboOoOF6b2FSmERiAhY=\");\n\n_c = FirebaseAuthState;\nexport default FirebaseAuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthState\");","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/Hardware-Inventory-App/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axiosAuth","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","destr","getIdTokenResult","token","console","log","post","then","res","payload","data"],"mappings":";;;;;;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAGA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBACnBL,UAAU,CAACE,OAAD,CADS;AAAA,MAChCI,QADgC,eAChCA,QADgC;;AAIxCP,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAOE,QAAQ,CAACM,IAAT,GAAgBC,gBAAhB;AAAA,2EAAiC,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC/BA,IAD+B;AAAA;AAAA;AAAA;;AAEhCH,gBAAAA,QAAQ,CAAC;AACLI,kBAAAA,IAAI,EAAE;AADD,iBAAD,CAAR;AAGAC,gBAAAA,KAAK;AAL2B;AAAA;;AAAA;AAAA;AAAA,uBAORF,IAAI,CAACG,gBAAL,EAPQ;;AAAA;AAAA;AAOxBC,gBAAAA,KAPwB,yBAOxBA,KAPwB;AAQhCC,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACAV,gBAAAA,SAAS,CAACa,IAAV,CAAe,eAAf,EACI,EADJ,EAGCC,IAHD,CAGM,UAAAC,GAAG,EAAI;AACTJ,kBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BG,GAA1B;AACAZ,kBAAAA,QAAQ,CAAC;AACLI,oBAAAA,IAAI,EAAE,OADD;AAELS,oBAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,mBAAD,CAAR;AAIH,iBATD;;AATgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjC;;AAAA;AAAA;AAAA;AAAA,QAAP;AAqBH,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA,sBAAO;AAAA,cAAGf;AAAH,mBAAP;AACH,CA7BD;;GAAMD,iB;;KAAAA,iB;AA+BN,eAAeA,iBAAf","sourcesContent":["//create a component that will keep track of user's auth state\r\n//then wrap _app.js so that entire app knows if the user is logged in or not\r\n\r\nimport React, { useEffect, useContext } from 'react';\r\nimport firebase from '../firebase';\r\nimport { Context } from '../context';\r\nimport { axiosAuth } from '../actions/axios';\r\n\r\n\r\nconst FirebaseAuthState = ({ children }) => {\r\n    const { dispatch } = useContext(Context);\r\n\r\n\r\n    useEffect(() => {\r\n        return firebase.auth().onIdTokenChanged(async (user) => {\r\n            if (!user) {\r\n                dispatch({\r\n                    type: 'LOGOUT',\r\n                });\r\n                destr\r\n            } else {\r\n                const { token } = await user.getIdTokenResult();\r\n                console.log('TOKEN', token);\r\n                axiosAuth.post('/current-user',\r\n                    {},\r\n                )\r\n                .then(res => {\r\n                    console.log('RES =====>', res)\r\n                    dispatch({\r\n                        type: 'LOGIN',\r\n                        payload: res.data,\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}