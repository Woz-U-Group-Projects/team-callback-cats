let admin,User,Product;_6bb‍.x([["findOrCreateUser",()=>findOrCreateUser],["findOrCreateProduct",()=>findOrCreateProduct]]);_6bb‍.w("../firebase",[["default",["admin"],function(v){admin=v}]]);_6bb‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_6bb‍.w("../models/product",[["default",["Product"],function(v){Product=v}]]);



       const findOrCreateUser = async (req, res, next) => {
    try {
        const firebaseUser = await admin.auth().verifyIdToken(req.headers.token);
        //console.log('Firebase User in Current User Middleware', firebaseUser);
        const user = await User.findOne({ email: firebaseUser.email })
        if (user) {
            _6bb‍.g.console.log('FOUND USER =====>', user);
            req.currentUser = user;
            next();
        } else {
            let newUser = await new User ({
                email: firebaseUser.email,
                name: firebaseUser.name
                    ? firebaseUser.name
                    : firebaseUser.email.split('@')[0],
            }).save();
            _6bb‍.g.console.log('NEW USER =====>', newUser);
            req.currentUser = newUser;
            next();
        }
    } catch (err) {
        _6bb‍.g.console.log(err)
        res.status(401).json({
            err: 'Invalid or expired token'
        });
    }
};

       const findOrCreateProduct = async (req, res, next) => {
    try {
        const firebaseProduct = await admin.auth().verifyIdToken(req.headers.token);
        //console.log('Firebase User in Current User Middleware', firebaseUser);
        const product = await Product.findOne({ productName: firebaseProduct.productName })
        if (product) {
            _6bb‍.g.console.log('FOUND PRODUCT =====>', product);
            req.currentProduct = product;
            next();
        } else {
            let newProduct = await new Product ({
                productName: firebaseProduct.productName,
                category: firebaseProduct.category,
                productPrice: firebaseProduct.productPrice,
                countInStock: firebaseProduct.countInStock,
                description: firebaseProduct.description,
                notes: firebaseProduct.notes,
            }).save();
            _6bb‍.g.console.log('NEW PRODUCT =====>', newProduct);
            req.currentProduct = newProduct;
            next();
        }
    } catch (err) {
        _6bb‍.g.console.log(err)
        res.status(401).json({
            err: 'Invalid or expired token'
        });
    }
};